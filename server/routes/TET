// PUT Update Password
router.put('/password', authenticate, async (req, res) => {
  const { oldPassword, newPassword } = req.body;
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ msg: 'Old password is incorrect' });
    }

    user.password = newPassword;
    await user.save();
    res.json({ msg: 'Password has been updated successfully' });
  } catch (error) {
    console.error('Update Password Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// GET Users
router.get('/', authenticate, async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    console.error('Get Users Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// DELETE User
router.delete('/:id', authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    await user.remove();
    res.json({ msg: 'User has been deleted successfully' });
  } catch (error) {
    console.error('Delete User Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// PUT Update User
router.put('/:id', authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    user.firstName = req.body.firstName || user.firstName;
    user.lastName = req.body.lastName || user.lastName;
    user.email = req.body.email || user.email;
    user.phone = req.body.phone || user.phone;
    user.dob = req.body.dob || user.dob;
    user.address = req.body.address || user.address;

    await user.save();
    res.json(user);
  } catch (error) {
    console.error('Update User Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// POST Forgot Password
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    const resetToken = user.getResetPasswordToken();

    await user.save();

    const resetUrl = `http://localhost:3000/reset-password/${resetToken}`;

    const message = `Click the link below to reset your password: ${resetUrl}`;

    try {
      await sendEmail({
        email: user.email,
        subject: 'Reset Password',
        message
      });

      res.json({ msg: 'Email sent successfully' });
    } catch (error) {
      console.error('Email Error:', error);
      user.resetPasswordToken = undefined;
      user.resetPasswordExpires = undefined;
      await user.save();
      res.status(500).json({ msg: 'Server error', error: error.message });
    }
  } catch (error) {
    console.error('Forgot Password Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// PUT Reset Password

router.put('/reset-password/:resetToken', async (req, res) => {
  const { resetToken } = req.params;
  const { password } = req.body;  

  try {
    const user = await User.findOne({
      resetPasswordToken: resetToken,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ msg: 'Invalid or expired token' });
    }

    user.password = password; 
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    res.json({ msg: 'Password updated successfully' });
  } catch (error) {
    console.error('Reset Password Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// GET User Profile
router.get('/profile', authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }
    res.json(user);
  } catch (error) {
    console.error('Get User Profile Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// PUT Update User Profile
router.put('/profile', authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    user.firstName = req.body.firstName || user.firstName;
    user.lastName = req.body.lastName || user.lastName;
    user.email = req.body.email || user.email;
    user.phone = req.body.phone || user.phone;
    user.dob = req.body.dob || user.dob;
    user.address = req.body.address || user.address;

    await user.save();
    res.json(user);
  } catch (error) {
    console.error('Update User Profile Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});

// PUT Update User Profile Photo

router.put('/profile-photo', authenticate, upload.single('profilePhoto'), async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    user.profilePhoto = req.file.filename;

    await user.save();

    res.json(user);
  } catch (error) {
    console.error('Update User Profile Photo Error:', error);
    res.status(500).json({ msg: 'Server error', error: error.message });
  }
});